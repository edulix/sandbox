import { arithm, crypto, util, eio } from "./vjsc-1.1.1.js"
import "util"
import { inspect } from "util"

console.log("****************** test2.js ******************")

let randomSource = new crypto.RandomDevice()
let statDist = 50

// EG schnorr

const base = "0"
const pkString = "771632082893826147986001739015100390596891993741029383383193370304233499104250823855538643959571858723710269154759912753019096784501541341466089847723525936179275117294813910832130755064522276413408403471023984963242166938153514069926404934758661658257528718300677232438335809800481911356354734662950853501660000145640709855645391964120329649409161971123640130297755334097586116457161951378680819803181090266716165659095625287968651973742648699607244681163394174768818366596717488745410469972968169184799110618064506572240944976913745904205825731589635359287435860361627388201591772448956679969276015870287328631781151622921435584522469318802495374119157619783895250141260352043112231280456995705163091740813958450829394158007607091681144969124391351245862532242645135756046695113726745157026797494167586072376028245411007188932002163390051177405177929403986037713624631361941335904237672202322945639576289260377190069492485150920852597695986856461721309575473539085539067305946902967068996157306200623126274091131447903492233185316446352047430904649146900953667581866468414198230062952987476093392028184883548098669597063164623530920554398029085991176479347182588985435009542370035985705909513848711171297430669367333956054020665531"
const commitment = "855524102737723962237521812428163516510758472215122430748883967045793404610670486660838746338593516836807175220844862271956172237916825895104770694040470795774627892720188315911177975216605032583616572783566844990156734118631697744329747202531342126086084364807272804415263971824054437878227019291277181499890793582283936475804384924261570782589882446282601612685509819965549534661817037431870617808569006275303478418922921787433759189856537414790014248459920479769004944719601839710324503054028187366186002318450695442314555444834379123935239800522800849410674588735424404824238552328174159724689682911247357888577624031929436504729308249946315102980063945073742197389120598519998494024336364528292743100665497343942729876074620804185656867029739260884468147973912341294436973913754131277581281335396195732863443835202905358294591972398198785929932625800523526640842611226197640169414626291132546476245734896911256610173308930796713724251004101954262275095408602914563591770524170472874093884505606225402487328043308814573928647456345814437457966421969074184924876850092801468670935809698256567730363465668898628935636773457349835915405025536133488899137310929237406687860463524650411144922955938271886004161062616369682884025360583"
const challenge = "69140791929353205316569033988073687580493884653616429803092163035389876018302"
const response = "56419786273425368381000826435612342053915367930143492376714917629480845325942"

const baseBigInt = BigInt(base)
const pkBigInt = BigInt(pkString)
const commitmentBigInt = BigInt(commitment)
const challengeBigInt = BigInt(challenge)
const responseBigInt = BigInt(response)

const bb = util.hexToByteArray(baseBigInt.toString(16))
const pkb = util.hexToByteArray(pkBigInt.toString(16))
const cb = util.hexToByteArray(commitmentBigInt.toString(16))
const challengeb = util.hexToByteArray(challengeBigInt.toString(16))
const rb = util.hexToByteArray(responseBigInt.toString(16))

var concat = new Uint8Array(bb.length + pkb.length + cb.length)
concat.set(bb)
concat.set(pkb, bb.length)
concat.set(cb, bb.length + pkb.length)

const p_param = "1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085895011648256092372242446818525911665961045150145231572613786749168750228798758833" 
const g_param =  "633902738424928856783669360417409461352724866437176267937054971987929518113968311572018846775440350331394872441420725806863767569147521628581387346133794141162759618915434384470928048515684966754389921404728037087585951549298706749491681316440418023335644037157549668734734747234193236480208211700649047792505290394509276323498712019417085994608675098219625068478389802372911974790447602798848267203035795626948013815751746314708193865142515067213438779931341448784231764283922931059803394647357407601820746377200693540251395985610151207325893305136968984729108604308872514815118245429658506703427331797397729626291989388778680839647127066755635696870257359738766274560298982571341199340105150191282665463341766016615086716556537263439886148093374656225718217401337340651580107886515914073965138178083420939392671278560530056147682312589783964279302141118430614587577025403023718516789910534505871873011436491653121601912717709648600938567837813521742472036386528727473354399846339619270536399678071529700504925046483796750809603796528358402843506478188359404393987635666119244256746743854126114174948922250715011664059118382465474343042744744366613138372697678748514832068141362891787033831013749278870696574778057534613154041019988"

const p_value = new arithm.LargeInteger(BigInt(p_param).toString(16)) 

const p_group: arithm.ModPGroup = new arithm.ModPGroup(
    p_value,
    p_value.sub(arithm.LargeInteger.ONE).div(arithm.LargeInteger.ONE.add(arithm.LargeInteger.ONE)),
    new arithm.LargeInteger(BigInt(g_param).toString(16)),
    1
)

const label = randomSource.getBytes(10)
const eh = new arithm.ExpHom(p_group.pRing, p_group.getg())

class X extends crypto.SchnorrProof {
    constructor(homomorphism: arithm.ExpHom) {
        super(homomorphism)
    }

    challenge(first: eio.ByteTree, second: crypto.HashFunction): arithm.PRingElement {
        // console.log("challenge receives bt")
        // console.log(inspect(first, false, 3, true))
        // console.log("================")
        const digest = second.hash(first.toByteArrayRaw())
        // console.log("challenge input byte array")
        // console.log(first.toByteArrayRaw().slice(1024, 1124))
        // console.log(first.toByteArrayRaw().length)
        // console.log("================")
        // console.log("digest")
        // console.log(util.byteArrayToHex(digest))
        // console.log("================")
        return this.homomorphism.domain.getPField().toElement(digest)
    }

    instanceToByteTree(instance: arithm.PGroupElement): eio.ByteTree {
        // console.log("returning instance bt")
        // console.log(inspect(instance.toByteTreeNoZero(), false, 3, true))
        // console.log("================")
        return instance.toByteTreeNoZero()
    }

    byteTreeToCommitment(byteTree: eio.ByteTree) {
        return this.homomorphism.range.toElementAlt(byteTree)
    }

    /*byteTreeToReply(byteTree: eio.ByteTree) {
        return this.homomorphism.domain.toElement(byteTree.toByteArrayRaw())
    }*/

    verifyEG(label: Uint8Array, instance: eio.ByteTree, 
        commitment: Uint8Array | eio.ByteTree, 
        challenge: Uint8Array, response: Uint8Array): boolean {
        
        const instanceElement = this.homomorphism.range.toElementAlt(instance)
        
        const cbtt = eio.ByteTree.asByteTree(commitment)
        const rbtt = eio.ByteTree.asByteTree(response)
        
        const proof = new eio.ByteTree([cbtt, rbtt])
        
        // console.log("setting proof as")
        // console.log(inspect(proof, false, 3, true))
        // console.log("================")
        
        const proofb = proof.toByteArray()
        
        return this.verify(label, instanceElement, crypto.sha256, proofb)
    }
}

let spa = new X(eh)
// instance = p_group.encode(pkb, 0, pkb.length)

// instance = p_group.toElement(eio.ByteTree.asByteTree(pkb2))
const instance = p_group.toElement(pkb)

// console.log(pkBigInt.toString(16))
// console.log(util.byteArrayToHex(instance.toByteTree().toByteArray()))

const lbt = eio.ByteTree.asByteTree(bb)
const ibt = spa.instanceToByteTree(instance)
const cbt = eio.ByteTree.asByteTree(cb)
const rbt = eio.ByteTree.asByteTree(rb)

const prf = new eio.ByteTree([cbt, rbt])

const bt = new eio.ByteTree([lbt, ibt, cbt])
const ch = spa.challenge(bt, crypto.sha256)
console.log(ch.equals(p_group.pRing.toElement(challengeb)))

var ok = spa.verify(bb, instance, crypto.sha256, prf.toByteArray())
console.log(ok)

ok = spa.verifyEG(bb, eio.ByteTree.asByteTree(pkb), cb, challengeb, rb)
console.log(ok)

// EG Chaum-Pedersen

// prove that g^x = public key and alpha^x = partial decryption (Share in schema) and knowledge of x

const c1 = "982491594041718614644976072110281581060908279876429109897820063394361685352526660244070019012061086377070327932418644851063514010733541734245793498638261263147700622274012468553456886939815645893557734907745723832936261938550834117131183947337327784277172368530876549204482716197252099379469945072327565701119616926189264253468186472335895877301584823582614511489689368801602812546843862258979797608805874300963331990682240262118304624724201929191096535883336045623221039658513843326463214983315221953052976696305278326712718360938088890401763602152714586387434493093168107204700677190684406168950079147170761719295307272157054685649963346539115206096312678411993008505894259712095482618668850255988192290455035633036179832499060672853191953736261751627940038965443594588793600236049079887683517323320700279038192441521283944351308691259407616713914833777159627490320183979345701609669321528683820494748229712850838327834829177614158663027449276486242921402579515815757606002252699828069010893345499898904571169219678146822290038328245499897451392630952028777057439853701372458394838708890446829832801550720139839114541326459365622371672121987260609787103082876948554594639963774059937250869623113046398243076030241268637460502390915"
const c1b = util.hexToByteArray(BigInt(c1).toString(16))
// the generator for first side is the standard generator
const g = p_group.getg()
// the generator for second side is the alpha of the ciphertext
const h = p_group.toElement(c1b)
// the public key for the first trustee
const A = "771632082893826147986001739015100390596891993741029383383193370304233499104250823855538643959571858723710269154759912753019096784501541341466089847723525936179275117294813910832130755064522276413408403471023984963242166938153514069926404934758661658257528718300677232438335809800481911356354734662950853501660000145640709855645391964120329649409161971123640130297755334097586116457161951378680819803181090266716165659095625287968651973742648699607244681163394174768818366596717488745410469972968169184799110618064506572240944976913745904205825731589635359287435860361627388201591772448956679969276015870287328631781151622921435584522469318802495374119157619783895250141260352043112231280456995705163091740813958450829394158007607091681144969124391351245862532242645135756046695113726745157026797494167586072376028245411007188932002163390051177405177929403986037713624631361941335904237672202322945639576289260377190069492485150920852597695986856461721309575473539085539067305946902967068996157306200623126274091131447903492233185316446352047430904649146900953667581866468414198230062952987476093392028184883548098669597063164623530920554398029085991176479347182588985435009542370035985705909513848711171297430669367333956054020665531"
// the partial decryption share
const B = "282188385365803223653969552228466584168855204160995380029867334370016853462806371108188904195875425252070555622309579150922658677962432144380060017681353077495884670440454837068156975555492534238408328973734181791796600071610117785179421980125499783597659800768713817421632315247113271641550007301676387143337078447253935885388797882950473118510647530062823284557497947257835501109548998591256546080825195654779038222641327286943952797365459821662853181406935335036597997522600141928350032221461184635754904087071101940644462069072203352607285111962862406367904439126801490590157784967101510529045535205665217710707677375025592976440768469238592767217117118468335418296746736508886557131953963554821242433819236654675274999243212441649340770975474274081285532902814008683648461799634339049804636809347974882953807211478856485354267505719847024016514762774716711220637696471184617939334516499324719574884285852551720665883543389556973441274639487189745253762282328069102641376144630339273795982705992497355779893991663687939161675524024537557506752094517722545593558729075432629399768755825801446438431883366262627863195408284780355689352786886570181448926149843096031485826744569343544175160042657424042259586437424671434150211540502"
const cpCommitment = {
    c1: "501986327425004731934884237523307674973518257249515950047784672291975480823614486718832606472107101219707416652534583253098937649444647842058151092473107219434790541073139758004637243002484124046532587396898331333051669926250927441876348769291437025884813640411652306325929680749048372937156060818225264034363360256085717048421708872427878894815603681971921557582760285914850912476711269588987047956714631740793278701028493427879435093269180225480418519951855295776698857949565528176060927228650779254630782001329181844159893726225178184117973277526194322242175260446113254251358106832522861280044814691358327082889289346113556477470003956317562639309929054629103100795990545798012255607174674619187311200697490896575657474270826253388219781582385641218502265212228851234985128462093058469787820361192423870879514193318936710730049320838232076914004898404795250067237054430406157019170640160903666507717128529670864918567420405632198013576262825004024751984000132358022922178079035858611022812616571105114220226444084492792183050964855081533960480726114266574003898805073259438084159115656527679857544458194081770567696812495834380846523551104657802792869099769541509080977548493230342176943562766480175306891476608439487393795633608",
    c2: "9731553847928777317956302762923702443868298157731422864616175046743558721706494987491778410206000029977295272337862059791346336813662261675430220839577406736150049854470803589530877967397464916166357788306199306115672310151881050405982035193224046388042454660213887176995519912662330172686599265049851420476861232409199856657201135405013446907242875298739431000953579749713632215694299307181963637737911212582788897660764466143805095998925490232898371522223365096143436911488599302011972536986810537474111437341207605291058021232179451524617459051196510850792981595745013847777080875163922065529524728969212970981318553662483843419144455780267396670380459353412452327606205907891499333892022622102278759104508459336327165493046965739275943837174763725735958258004404730277111290756330234033714425750280770927908284406743040251949498524524343258232065409123576634874312763988226468150770854068888797378829969862320522452476296791858405931216068500013507972780657682703268578136226156648930571759342450354428728326757407559824110678091757326760369760906545872851954879296682082619429765599063333274933252177555713129691440737578448496578634426088960023229237113884234666453310561625186474107563938103771682331705234526235554670103846"
}
const cpChallenge = "92569401019849946312326950581411070387865374905795848181067315898257875169777"
const cpResponse = "8769326599422469570988103709328556955215629490517403020868076593438210056671"

const ppGroup = new arithm.PPGroup([p_group, p_group])
const pair = ppGroup.prod([g, h])

const eh2 = new arithm.ExpHom(p_group.pRing, pair)
const spc = new X(eh2)

const Ab = util.hexToByteArray(BigInt(A).toString(16))
const Bb = util.hexToByteArray(BigInt(B).toString(16))

const Abt = eio.ByteTree.asByteTree(Ab)
const Bbt = eio.ByteTree.asByteTree(Bb)

const instancePair = new eio.ByteTree([Abt, Bbt])

const comm1b = util.hexToByteArray(BigInt(cpCommitment.c1).toString(16))
const comm2b = util.hexToByteArray(BigInt(cpCommitment.c2).toString(16))

const comm1bt = eio.ByteTree.asByteTree(comm1b)
const comm2bt = eio.ByteTree.asByteTree(comm2b)

const commitmentPair = new eio.ByteTree([comm1bt, comm2bt])
// console.log("commitmentPair bt")
// console.log(inspect(commitmentPair, false, 3, true))
// console.log("================")

const cpCb = util.hexToByteArray(BigInt(cpChallenge).toString(16))
const cpRb = util.hexToByteArray(BigInt(cpResponse).toString(16))

// console.log("challenge direct element is")
// console.log(p_group.pRing.toElement(cpCb))
// console.log("================")

// console.log("challenge hex")
// console.log(BigInt(cpChallenge).toString(16))
// console.log("================")
// the extended base hash is also 0, re-use bb
ok = spc.verifyEG(bb, instancePair, commitmentPair, cpCb, cpRb)
console.log(ok)

// ok = sp.verify(label, instance, crypto.sha256, proof)

// console.log(ok)

